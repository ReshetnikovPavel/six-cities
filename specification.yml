openapi: 3.0.3
info:
  title: Real Estate API
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Development server

paths:
  /users:
    post:
      summary: Create new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/GetUserDto'
                  token:
                    type: string
        '400':
          description: Validation error
        '409':
          description: User already exists

  /users/login:
    post:
      summary: User login
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/GetUserDto'
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /users/me:
    get:
      summary: Get current user
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDto'
        '401':
          description: Unauthorized

  /users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDto'
        '404':
          description: User not found

  /users/me/picture:
    post:
      summary: Upload profile picture
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '400':
          description: File upload error

  /offers:
    get:
      summary: List offers
      tags: [Offers]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Offers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListOfferDTO'
    post:
      summary: Create new offer
      tags: [Offers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfferDTO'
      responses:
        '201':
          description: Offer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOfferDto'

  /offers/premiums/{city}:
    get:
      summary: Get premium offers by city
      tags: [Offers]
      parameters:
        - in: path
          name: city
          schema:
            type: string
            enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
          required: true
      responses:
        '200':
          description: Premium offers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListOfferDTO'

  /offers/favorites/me:
    get:
      summary: Get favorite offers
      tags: [Offers]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Favorite offers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListOfferDTO'

  /offers/{offerId}:
    get:
      summary: Get offer details
      tags: [Offers]
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '200':
          description: Offer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOfferDto'
    patch:
      summary: Update offer
      tags: [Offers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOfferDTO'
      responses:
        '200':
          description: Updated offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOfferDto'
    delete:
      summary: Delete offer
      tags: [Offers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '204':
          description: Offer deleted

  /offers/{offerId}/comments:
    get:
      summary: Get offer comments
      tags: [Comments]
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '200':
          description: Comments list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCommentDto'
    post:
      summary: Create comment
      tags: [Comments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentDto'

  /offers/favorites/{offerId}:
    post:
      summary: Add to favorites
      tags: [Offers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '204':
          description: Added to favorites
    delete:
      summary: Remove from favorites
      tags: [Offers]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            pattern: ^[0-9a-fA-F]{24}$
          required: true
      responses:
        '204':
          description: Removed from favorites

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateUserDto:
      type: object
      required: [name, email, password, type]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12
        type:
          type: string
          enum: [ordinary, pro]

    LoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12

    GetUserDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        profilePicture:
          type: string
          nullable: true
        type:
          type: string
          enum: [ordinary, pro]

    CreateOfferDTO:
      type: object
      required: [name, description, city, preview, housingPhotos, isPremium, housingType, roomsNumber, guestsNumber, rentalCost, conveniences, location]
      properties:
        name:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
        preview:
          type: string
          format: uri
        housingPhotos:
          type: array
          minItems: 6
          items:
            type: string
            format: uri
        isPremium:
          type: boolean
        housingType:
          type: string
          enum: [apartment, house, room, hotel]
        roomsNumber:
          type: integer
          minimum: 1
          maximum: 8
        guestsNumber:
          type: integer
          minimum: 1
          maximum: 10
        rentalCost:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          minItems: 1
          items:
            type: string
            enum: [Breakfast, "Air conditioning", "Laptop friendly workspace", "Baby seat", Washer, Towels, Fridge]
        location:
          $ref: '#/components/schemas/LocationDto'

    EditOfferDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
        preview:
          type: string
          format: uri
        housingPhotos:
          type: array
          items:
            type: string
            format: uri
        isPremium:
          type: boolean
        housingType:
          type: string
          enum: [apartment, house, room, hotel]
        roomsNumber:
          type: integer
          minimum: 1
          maximum: 8
        guestsNumber:
          type: integer
          minimum: 1
          maximum: 10
        rentalCost:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
            enum: [Breakfast, "Air conditioning", "Laptop friendly workspace", "Baby seat", Washer, Towels, Fridge]
        location:
          $ref: '#/components/schemas/LocationDto'

    GetOfferDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        city:
          type: string
        preview:
          type: string
        housingPhotos:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
        housingType:
          type: string
        roomsNumber:
          type: integer
        guestsNumber:
          type: integer
        rentalCost:
          type: integer
        conveniences:
          type: array
          items:
            type: string
        authorId:
          type: string
        location:
          $ref: '#/components/schemas/LocationDto'
        commentsCount:
          type: integer

    ListOfferDTO:
      type: object
      properties:
        id:
          type: string
        rentalCost:
          type: integer
        name:
          type: string
        housingType:
          type: string
        isFavorite:
          type: boolean
        createdAt:
          type: string
          format: date-time
        city:
          type: string
        preview:
          type: string
        isPremium:
          type: boolean
        rating:
          type: number
        commentsCount:
          type: integer

    LocationDto:
      type: object
      required: [latitude, longitude]
      properties:
        latitude:
          type: number
        longitude:
          type: number

    CreateCommentDto:
      type: object
      required: [text, rating]
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: integer
          minimum: 1
          maximum: 5

    GetCommentDto:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        rating:
          type: integer
        authorId:
          type: string
